// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2023 22:01:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SMCtrl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SMCtrl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg dir;
reg reset;
// wires                                               
wire [3:0] SMC;

// assign statements (if any)                          
SMCtrl i1 (
// port map - connection between master ports and signals/registers   
	.SMC(SMC),
	.clk(clk),
	.dir(dir),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

// dir
initial
begin
	dir = 1'b0;
	dir = #210000 1'b1;
	dir = #100000 1'b0;
	dir = #250000 1'b1;
	dir = #250000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #150000 1'b0;
	reset = #310000 1'b1;
	reset = #60000 1'b0;
end 
endmodule

