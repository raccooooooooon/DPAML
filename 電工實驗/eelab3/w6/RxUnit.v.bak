module RxUnit(reset,clk,rx,RData, ready);

input reset,clk,rx;
output [7:0] RData;
output reg ready;

reg [2:0] cs,ns;
wire rdc;
reg rst,shift_en;

//Rx Control Circuit
always @(posedge clk)
	cs<=ns;
always @(reset or rx or rdc or cs)
	if(reset==1'b0)
		ns <= 3'd0;
	else
		case(cs)
		3'd0: ns <= 3'd1;
		3'd1: ns <= (rx)?3'd1:3'd2;
		3'd2: ns <= (rdc)?3'd3:3'd2;
		3'd3: ns <= (rx)?3'd4:3'd1;
		3'd4: ns <= (rx)?3'd1:3'd2;
		default: ns <= 3'd0;
	endcase
	
//Output Decoder
always @(cs)
	case(cs)
		3'd0:begin
		rst <= 1'b1;
		shift_en <= 1'b0;
		ready <= 1'b0;
		end
		3'd1:begin
		rst <= 1'b1;
		shift_en <= 1'b0;
		ready <= 1'b0;
		end
		3'd2:begin
		rst <= 1'b0;
		shift_en <= 1'b1;
		ready <= 1'b0;
		end
		3'd3:begin
		rst <= 1'b1;
		shift_en <= 1'b0;
		ready <= 1'b0;
		end
		3'd4:begin
		rst <= 1'b1;
		shift_en <= 1'b0;
		ready <= 1'b1;//data received complete
		end
		default:begin
		rst <= 1'b1;
		shift_en <= 1'b0;
		ready <= 1'b0;
		end
		endcase
		
count8 U0(rst, clk, rdc);
RXshift U1(.rst(rst),.rxd(rx),.clk(clk),
		     .en(shift_en),.rdc(rdc),.Dout(RData));

endmodule
