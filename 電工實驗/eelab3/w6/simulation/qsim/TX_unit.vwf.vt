// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/20/2023 19:56:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TX_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TX_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] TData;
reg clk;
reg reset;
reg start;
// wires                                               
wire tx;

// assign statements (if any)                          
TX_unit i1 (
// port map - connection between master ports and signals/registers   
	.TData(TData),
	.clk(clk),
	.reset(reset),
	.start(start),
	.tx(tx)
);
initial 
begin 
#1000000 $finish;
end 
// TData[ 7 ]
initial
begin
	TData[7] = 1'b0;
	TData[7] = #200000 1'b1;
	TData[7] = #100000 1'b0;
	TData[7] = #100000 1'b1;
	TData[7] = #100000 1'b0;
	TData[7] = #400000 1'b1;
end 
// TData[ 6 ]
initial
begin
	TData[6] = 1'b1;
	TData[6] = #100000 1'b0;
	TData[6] = #100000 1'b1;
	TData[6] = #100000 1'b0;
	TData[6] = #100000 1'b1;
	TData[6] = #100000 1'b0;
	TData[6] = #100000 1'b1;
	TData[6] = #200000 1'b0;
	TData[6] = #100000 1'b1;
end 
// TData[ 5 ]
initial
begin
	TData[5] = 1'b1;
	TData[5] = #100000 1'b0;
	TData[5] = #100000 1'b1;
	TData[5] = #100000 1'b0;
	TData[5] = #100000 1'b1;
	TData[5] = #100000 1'b0;
	TData[5] = #300000 1'b1;
	TData[5] = #100000 1'b0;
end 
// TData[ 4 ]
initial
begin
	TData[4] = 1'b1;
	TData[4] = #100000 1'b0;
	TData[4] = #400000 1'b1;
	TData[4] = #100000 1'b0;
	TData[4] = #100000 1'b1;
	TData[4] = #100000 1'b0;
	TData[4] = #100000 1'b1;
end 
// TData[ 3 ]
initial
begin
	TData[3] = 1'b0;
	TData[3] = #200000 1'b1;
	TData[3] = #100000 1'b0;
end 
// TData[ 2 ]
initial
begin
	TData[2] = 1'b0;
	TData[2] = #100000 1'b1;
	TData[2] = #200000 1'b0;
	TData[2] = #100000 1'b1;
	TData[2] = #300000 1'b0;
end 
// TData[ 1 ]
initial
begin
	TData[1] = 1'b1;
	TData[1] = #100000 1'b0;
	TData[1] = #400000 1'b1;
	TData[1] = #100000 1'b0;
	TData[1] = #100000 1'b1;
	TData[1] = #200000 1'b0;
end 
// TData[ 0 ]
initial
begin
	TData[0] = 1'b0;
	TData[0] = #100000 1'b1;
	TData[0] = #100000 1'b0;
	TData[0] = #300000 1'b1;
	TData[0] = #100000 1'b0;
	TData[0] = #200000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #580000 1'b0;
	reset = #80000 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #120000 1'b1;
	start = #460000 1'b0;
	start = #140000 1'b1;
end 
endmodule

