// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2023 20:26:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          outputre
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module outputre_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _end;
reg change;
reg rst;
reg [4:0] s;
// wires                                               
wire out_reset;

// assign statements (if any)                          
outputre i1 (
// port map - connection between master ports and signals/registers   
	._end(_end),
	.change(change),
	.out_reset(out_reset),
	.rst(rst),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// _end
initial
begin
	_end = 1'b0;
	_end = #650000 1'b1;
	_end = #210000 1'b0;
end 

// change
initial
begin
	change = 1'b0;
	change = #60000 1'b1;
	change = #30000 1'b0;
	change = #160000 1'b1;
	change = #30000 1'b0;
	change = #180000 1'b1;
	change = #30000 1'b0;
	change = #150000 1'b1;
	change = #30000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10000 1'b1;
	rst = #140000 1'b0;
	rst = #120000 1'b1;
	rst = #120000 1'b0;
	rst = #110000 1'b1;
end 
// s[ 4 ]
initial
begin
	s[4] = 1'b0;
	s[4] = #520000 1'b1;
end 
// s[ 3 ]
initial
begin
	s[3] = 1'b0;
	s[3] = #520000 1'b1;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
	s[2] = #520000 1'b1;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #230000 1'b1;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b0;
	s[0] = #230000 1'b1;
end 
endmodule

